{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/saraw/Desktop/Adalab/Pair programming project/promo-n-module-4-pair-5-netflix/web/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom'; // components\n\nimport Header from './Header';\nimport AllMovies from './AllMovies';\nimport MyMovies from './MyMovies';\nimport Login from './Login';\nimport Profile from './Profile';\nimport SignUp from './SignUp'; // services\n\nimport apiMovies from '../services/api-movies';\nimport apiUser from '../services/api-user';\nimport router from '../services/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // state: user\n  const [userId, setUserId] = useState('');\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n  const [userMovies, setUserMovies] = useState([]); // state: login\n\n  const [loginErrorMessage, setLoginErrorMessage] = useState(''); // state: sign up\n\n  const [signUpErrorMessage, setSignUpErrorMessage] = useState(''); // state: movies\n\n  const [appMovies, setAppMovies] = useState([]);\n  const [allMoviesOptionGender, setAllMoviesOptionGender] = useState('');\n  const [allMoviesOptionSort, setAllMoviesOptionSort] = useState('asc');\n  /*\n  useEffect: obtener las películas del API.\n  Se ejecuta cuando allMoviesOptionGender o allMoviesOptionSort cambian de valor.\n  Como queremos que el back devuelva las películas filtradas por género y ordenadas por nombre estamos pasando a getMoviesFromApi estos dos valores.\n  */\n\n  useEffect(() => {\n    const params = {\n      gender: allMoviesOptionGender,\n      sort: allMoviesOptionSort\n    };\n    apiMovies.getMoviesFromApi(params).then(response => {\n      setAppMovies(response.movies);\n    });\n  }, [allMoviesOptionGender, allMoviesOptionSort]);\n  /*\n  useEffect: obtener el perfil de la usuaria.\n  Se ejecuta cuando userId cambian de valor, es decir, cuando pasa de un string vacío a un strin relleno con el id de la usuaria.\n  Como queremos que el back devuelva los datos de una usuaria getProfileFromApi recibe el userId.\n  */\n\n  useEffect(() => {\n    if (userId !== '') {\n      apiUser.getProfileFromApi(userId).then(response => {\n        setUserName(response.name);\n        setUserEmail(response.email);\n        setUserPassword(response.password);\n      });\n    }\n  }, [userId]);\n  /*\n  useEffect: obtener las películas de la usuaria.\n  Se ejecuta cuando userId cambian de valor, es decir, cuando pasa de un string vacío a un strin relleno con el id de la usuaria.\n  Como queremos que el back devuelva las películas de una usuaria getUserMoviesFromApi recibe el userId.\n  */\n\n  useEffect(() => {\n    if (userId !== '') {\n      apiUser.getUserMoviesFromApi(userId).then(response => {\n        setUserMovies(response.movies);\n      });\n    }\n  }, [userId]);\n  /*\n  Event: enviar datos del login al API.\n  Con este evento enviamos los datos del login al servidor cuando la usuaria lanza el evento.\n  Como queremos que el back devuelva el id de la usuaria sendLoginToApi recibe el email y la contraseña que ella haya escrito.\n  */\n\n  const sendLoginToApi = loginData => {\n    // Limpiamos el error antes de enviar los datos al API\n    setLoginErrorMessage(''); // Enviamos los datos al API\n\n    apiUser.sendLoginToApi(loginData).then(response => {\n      if (response.success === true) {\n        setUserId(response.userId); // Si la usuaria introduce bien sus datos redireccionamos desde la página de login al inicio de la página\n\n        router.redirect('/');\n      } else {\n        // Si la usuaria introduce mal sus datos guardamos el error que nos devuelve el API para que se pinte en la página\n        setLoginErrorMessage(response.errorMessage);\n      }\n    });\n  };\n  /*\n  Event: enviar datos del sign up (o registro) al API.\n  Con este evento enviamos los datos del sign up al servidor cuando la usuaria lanza el evento.\n  Como queremos que el back devuelva el id de la usuaria sendSingUpToApi recibe el email y la contraseña que ella haya escrito.\n  */\n\n\n  const sendSingUpToApi = data => {\n    // Limpiamos el error antes de enviar los datos al API\n    setSignUpErrorMessage(''); // Enviamos los datos al API\n\n    apiUser.sendSingUpToApi(data).then(response => {\n      if (response.success === true) {\n        setUserId(response.userId); // Si la usuaria introduce bien sus datos redireccionamos desde la página de signup al inicio de la página\n\n        router.redirect('/');\n      } else {\n        // Si la usuaria introduce mal sus datos guardamos el error que nos devuelve el API para que se pinte en la página\n        setSignUpErrorMessage(response.errorMessage);\n      }\n    });\n  };\n  /*\n  Event: enviar datos del profile al API.\n  Con este evento enviamos los datos del profile al servidor cuando la usuaria lanza el evento.\n  Le tenemos que indicar qué datos (nombre, email y contraseña) queremos enviar al API.\n  También le tenemos que indicar cuál es la usuaria actual, por ello enviamos el userId\n  */\n\n\n  const sendProfileToApi = (userId, data) => {\n    apiUser.sendProfileToApi(userId, data).then(() => {\n      // Después de enviar los datos al servidor los volvemos a pedir al servidor para tenerlos actualizados\n      apiUser.getProfileFromApi(userId).then(response => {\n        setUserName(response.name);\n        setUserEmail(response.email);\n        setUserPassword(response.password);\n      });\n    });\n  };\n  /*\n  Event: cerrar sesión.\n  Redireccionamos al inicio de la página.\n  Recargamos la página para que se borren todos los datos del estado de React.\n  */\n\n\n  const logout = () => {\n    router.redirect('/');\n    router.reload();\n  };\n  /*\n  Event: actualizar el género y la ordenación.\n  Aquí solo guardamos los datos en el estado.\n  En el primer useEffect le decimos que cuando estos datos cambien vuelva a pedir las películas al API.\n  */\n\n\n  const handleAllMoviesOptions = data => {\n    if (data.key === 'gender') {\n      setAllMoviesOptionGender(data.value);\n    } else if (data.key === 'sort') {\n      setAllMoviesOptionSort(data.value);\n    }\n  }; // render\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isUserLogged: !!userId,\n      logout: logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(AllMovies, {\n          movies: appMovies,\n          allMoviesOptionGender: allMoviesOptionGender,\n          allMoviesOptionSort: allMoviesOptionSort,\n          handleAllMoviesOptions: handleAllMoviesOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/my-movies\",\n        children: /*#__PURE__*/_jsxDEV(MyMovies, {\n          movies: userMovies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        children: /*#__PURE__*/_jsxDEV(Login, {\n          loginErrorMessage: loginErrorMessage,\n          sendLoginToApi: sendLoginToApi\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/signup\",\n        children: /*#__PURE__*/_jsxDEV(SignUp, {\n          signUpErrorMessage: signUpErrorMessage,\n          sendSingUpToApi: sendSingUpToApi\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/profile\",\n        children: /*#__PURE__*/_jsxDEV(Profile, {\n          userName: userName,\n          userEmail: userEmail,\n          userPassword: userPassword,\n          sendProfileToApi: sendProfileToApi\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"2pYHvei1nCdSapdxRDiLM/7vpA4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/mnt/c/Users/saraw/Desktop/Adalab/Pair programming project/promo-n-module-4-pair-5-netflix/web/src/components/App.js"],"names":["React","useEffect","useState","Route","Switch","Header","AllMovies","MyMovies","Login","Profile","SignUp","apiMovies","apiUser","router","App","userId","setUserId","userName","setUserName","userEmail","setUserEmail","userPassword","setUserPassword","userMovies","setUserMovies","loginErrorMessage","setLoginErrorMessage","signUpErrorMessage","setSignUpErrorMessage","appMovies","setAppMovies","allMoviesOptionGender","setAllMoviesOptionGender","allMoviesOptionSort","setAllMoviesOptionSort","params","gender","sort","getMoviesFromApi","then","response","movies","getProfileFromApi","name","email","password","getUserMoviesFromApi","sendLoginToApi","loginData","success","redirect","errorMessage","sendSingUpToApi","data","sendProfileToApi","logout","reload","handleAllMoviesOptions","key","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n// components\nimport Header from './Header';\nimport AllMovies from './AllMovies';\nimport MyMovies from './MyMovies';\nimport Login from './Login';\nimport Profile from './Profile';\nimport SignUp from './SignUp';\n// services\nimport apiMovies from '../services/api-movies';\nimport apiUser from '../services/api-user';\nimport router from '../services/router';\n\nconst App = () => {\n  // state: user\n  const [userId, setUserId] = useState('');\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n  const [userMovies, setUserMovies] = useState([]);\n  // state: login\n  const [loginErrorMessage, setLoginErrorMessage] = useState('');\n  // state: sign up\n  const [signUpErrorMessage, setSignUpErrorMessage] = useState('');\n  // state: movies\n  const [appMovies, setAppMovies] = useState([]);\n  const [allMoviesOptionGender, setAllMoviesOptionGender] = useState('');\n  const [allMoviesOptionSort, setAllMoviesOptionSort] = useState('asc');\n\n  /*\n  useEffect: obtener las películas del API.\n  Se ejecuta cuando allMoviesOptionGender o allMoviesOptionSort cambian de valor.\n  Como queremos que el back devuelva las películas filtradas por género y ordenadas por nombre estamos pasando a getMoviesFromApi estos dos valores.\n  */\n  useEffect(() => {\n    const params = {\n      gender: allMoviesOptionGender,\n      sort: allMoviesOptionSort\n    };\n    apiMovies.getMoviesFromApi(params).then(response => {\n      setAppMovies(response.movies);\n    });\n  }, [allMoviesOptionGender, allMoviesOptionSort]);\n\n  /*\n  useEffect: obtener el perfil de la usuaria.\n  Se ejecuta cuando userId cambian de valor, es decir, cuando pasa de un string vacío a un strin relleno con el id de la usuaria.\n  Como queremos que el back devuelva los datos de una usuaria getProfileFromApi recibe el userId.\n  */\n  useEffect(() => {\n    if (userId !== '') {\n      apiUser.getProfileFromApi(userId).then(response => {\n        setUserName(response.name);\n        setUserEmail(response.email);\n        setUserPassword(response.password);\n      });\n    }\n  }, [userId]);\n\n  /*\n  useEffect: obtener las películas de la usuaria.\n  Se ejecuta cuando userId cambian de valor, es decir, cuando pasa de un string vacío a un strin relleno con el id de la usuaria.\n  Como queremos que el back devuelva las películas de una usuaria getUserMoviesFromApi recibe el userId.\n  */\n  useEffect(() => {\n    if (userId !== '') {\n      apiUser.getUserMoviesFromApi(userId).then(response => {\n        setUserMovies(response.movies);\n      });\n    }\n  }, [userId]);\n\n  /*\n  Event: enviar datos del login al API.\n  Con este evento enviamos los datos del login al servidor cuando la usuaria lanza el evento.\n  Como queremos que el back devuelva el id de la usuaria sendLoginToApi recibe el email y la contraseña que ella haya escrito.\n  */\n  const sendLoginToApi = loginData => {\n    // Limpiamos el error antes de enviar los datos al API\n    setLoginErrorMessage('');\n    // Enviamos los datos al API\n    apiUser.sendLoginToApi(loginData).then(response => {\n      if (response.success === true) {\n        setUserId(response.userId);\n        // Si la usuaria introduce bien sus datos redireccionamos desde la página de login al inicio de la página\n        router.redirect('/');\n      } else {\n        // Si la usuaria introduce mal sus datos guardamos el error que nos devuelve el API para que se pinte en la página\n        setLoginErrorMessage(response.errorMessage);\n      }\n    });\n  };\n\n  /*\n  Event: enviar datos del sign up (o registro) al API.\n  Con este evento enviamos los datos del sign up al servidor cuando la usuaria lanza el evento.\n  Como queremos que el back devuelva el id de la usuaria sendSingUpToApi recibe el email y la contraseña que ella haya escrito.\n  */\n  const sendSingUpToApi = data => {\n    // Limpiamos el error antes de enviar los datos al API\n    setSignUpErrorMessage('');\n    // Enviamos los datos al API\n    apiUser.sendSingUpToApi(data).then(response => {\n      if (response.success === true) {\n        setUserId(response.userId);\n        // Si la usuaria introduce bien sus datos redireccionamos desde la página de signup al inicio de la página\n        router.redirect('/');\n      } else {\n        // Si la usuaria introduce mal sus datos guardamos el error que nos devuelve el API para que se pinte en la página\n        setSignUpErrorMessage(response.errorMessage);\n      }\n    });\n  };\n\n  /*\n  Event: enviar datos del profile al API.\n  Con este evento enviamos los datos del profile al servidor cuando la usuaria lanza el evento.\n  Le tenemos que indicar qué datos (nombre, email y contraseña) queremos enviar al API.\n  También le tenemos que indicar cuál es la usuaria actual, por ello enviamos el userId\n  */\n  const sendProfileToApi = (userId, data) => {\n    apiUser.sendProfileToApi(userId, data).then(() => {\n      // Después de enviar los datos al servidor los volvemos a pedir al servidor para tenerlos actualizados\n      apiUser.getProfileFromApi(userId).then(response => {\n        setUserName(response.name);\n        setUserEmail(response.email);\n        setUserPassword(response.password);\n      });\n    });\n  };\n\n  /*\n  Event: cerrar sesión.\n  Redireccionamos al inicio de la página.\n  Recargamos la página para que se borren todos los datos del estado de React.\n  */\n  const logout = () => {\n    router.redirect('/');\n    router.reload();\n  };\n\n  /*\n  Event: actualizar el género y la ordenación.\n  Aquí solo guardamos los datos en el estado.\n  En el primer useEffect le decimos que cuando estos datos cambien vuelva a pedir las películas al API.\n  */\n  const handleAllMoviesOptions = data => {\n    if (data.key === 'gender') {\n      setAllMoviesOptionGender(data.value);\n    } else if (data.key === 'sort') {\n      setAllMoviesOptionSort(data.value);\n    }\n  };\n\n  // render\n\n  return (\n    <>\n      {/* Le paso Header un booleano indicando si la usuaria está o no logada.\n      No es necesario pasarle el userId, no necesita saberlo, le basta con saber si está logada o no.\n      De esta forma Header maneja datos más simples y solo los que necesita. Queremos que Header sea lo más simple posible. */}\n      <Header isUserLogged={!!userId} logout={logout} />\n      <Switch>\n        <Route exact path=\"/\">\n          <AllMovies\n            movies={appMovies}\n            allMoviesOptionGender={allMoviesOptionGender}\n            allMoviesOptionSort={allMoviesOptionSort}\n            handleAllMoviesOptions={handleAllMoviesOptions}\n          />\n        </Route>\n        <Route path=\"/my-movies\">\n          <MyMovies movies={userMovies} />\n        </Route>\n        <Route path=\"/login\">\n          <Login loginErrorMessage={loginErrorMessage} sendLoginToApi={sendLoginToApi} />\n        </Route>\n        <Route path=\"/signup\">\n          <SignUp signUpErrorMessage={signUpErrorMessage} sendSingUpToApi={sendSingUpToApi} />\n        </Route>\n        <Route path=\"/profile\">\n          <Profile\n            userName={userName}\n            userEmail={userEmail}\n            userPassword={userPassword}\n            sendProfileToApi={sendProfileToApi}\n          />\n        </Route>\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}